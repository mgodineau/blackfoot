#version 430

// limit = 1536 on weathley
layout( local_size_x = 128, local_size_y = 1 ) in;

//outputs
layout(rgba32f, binding=0) uniform image2D color_output;
layout(r32f, binding=1) uniform image2D depth_output;

//textures
uniform sampler2D heightmap;
uniform sampler2D colormap;


//inputs
uniform float terrainScale;

uniform uint sampleCount = 10;
layout(std430, binding=3) buffer sampleDists {
	float dists[];
};



void drawLine( uint x, uint yMin, uint yMax, vec4 colorDown, vec4 colorUp, float depth ) {
	
	for( ivec2 coords = ivec2(x, yMin); coords.y<yMax; coords.y++ ) {
	
		float colorRatio = float(coords.y+1 - yMin) / (yMax - yMin);
		vec4 currentColor = colorDown + (colorUp-colorDown) * colorRatio;
		
		//vec4 col1 = vec4(1, 0, 0, 1);
		//vec4 col2 = vec4(0, 1, 0, 1);
		//vec4 currentColor = col1+ (col2-col1) * colorRatio;
		
		imageStore(color_output, coords, currentColor );
		imageStore(depth_output, coords, vec4(depth) );
	}
	
}




void main() {
	
	
	uint x = gl_GlobalInvocationID.x;
	
	
	vec2 rayDir = vec2( (float(x) / imageSize(color_output).x - 0.5) * 2.0 , 1);
	
	
	vec4 colorTmp = (gl_WorkGroupID.x % 2) == 0 ?
		vec4(1, 0.5, 0, 1) :
		vec4(0, 0.5, 1, 1);
	
	vec4 previousColor = vec4(0, 0, 0, 1);
	uint previousY = 0;
	
	for( uint i=0; i<sampleCount; i++ ) {
	
		float currentDist = dists[i];
		vec2 samplePos = rayDir * currentDist / terrainScale;
		
		float height = (texture( heightmap, samplePos).r - 0.2) * 2;
		
		
		uint currentY = uint( ((height - 0.5) / currentDist + 0.5) * imageSize(color_output).y );
		
		//vec4 color = vec4( vec3(height), 1 );
		vec4 color = texture(colormap, samplePos);
		//vec4 color = vec4(1, .5, 0, 1);
		
		if( currentY > previousY ) {
			drawLine(x, previousY, currentY, previousColor, color, currentDist);
			previousY = currentY;
			previousColor = color;
		}
	}
	
	
	//drawLine( x, 50, colorTmp, 0.5 );
	
}